@inproceedings{martin-lofIntuitionisticTypeTheory1984,
  title = {Intuitionistic Type Theory},
  booktitle = {Studies in Proof Theory},
  author = {{Martin-L{\"o}f}, P.},
  year = {1984},
  urldate = {2023-04-17},
  abstract = {Preface These lectures were given in Padova at the Laboratorio per Ricerche di Di-namica dei Sistemi e di Elettronica Biomedica of the Consiglio Nazionale delle Ricerche during the month of June 1980. I am indebted to Dr. Enrico Pagello of that laboratory for the opportunity of so doing. The audience was made up by philosophers, mathematicians and computer scientists. Accordingly, I tried to say something which might be of interest to each of these three categories. Essentially the same lectures, albeit in a somewhat improved and more advanced form, were given later in the same year as part of the meeting on Konstruktive Mengenlehre und Typentheorie which was organized in Munich by Prof. Dr. Helmut Schwichtenberg, to whom I am indebted for the invitation, during the week 29 September \textendash{} 3 October 1980. The main improvement of the Munich lectures, as compared with those given in Padova, was the adoption of a systematic higher level (Ger. Stufe) notation which allows me to write simply respectively. Moreover, the use of higher level variables and constants makes it possible to formulate the elimination and equality rules for the cartesian product in such a way that they follow the same pattern as the elimination and equality rules for all the other type forming operations. In their new formulation, these rules read {$\Pi$}-elimination c {$\in$} {$\Pi$}(A, B) (y(x) {$\in$} B(x) (x {$\in$} A)) d(y) {$\in$} C({$\lambda$}(y)) F(c, d) {$\in$} C(c) and {$\Pi$}-equality (x {$\in$} A) b(x) {$\in$} B(x) (y(x) {$\in$} B(x) (x {$\in$} A)) d(y) {$\in$} C({$\lambda$}(y)) F({$\lambda$}(b), d) = d(b) {$\in$} C({$\lambda$}(b)) respectively. Here y is a bound function variable, F is a new non-canonical (eliminatory) operator by means of which the binary application operation can be defined, putting Ap(c, a) {$\equiv$} F(c, (y) y(a)), and y(x) {$\in$} B(x) (x {$\in$} A) is an assumption, itself hypothetical, which has been put within parentheses to indicate that it is being discharged. A program of the new form F(c, d) has value e provided c has value {$\lambda$}(b) and d(b) has value e. This rule for evaluating F(c, d) reduces to the lazy evaluation rule for Ap(c, a) when the above definition is being made. Choosing C(z) to be B(a), thus independent of z, and d(y) to be y(a), the new elimination rule reduces to the old one and the new equality rule to the first of the two old equality rules. Moreover, the second \ldots},
  file = {/home/remi/Zotero/storage/WUBE7HJG/Martin-Löf - 1984 - Intuitionistic type theory.pdf}
}
@inproceedings{vidotFormalMonotonyAnalysis2022,
  title = {Formal {{Monotony Analysis}} of~{{Neural Networks}} with~{{Mixed Inputs}}: {{An Asset}} for~{{Certification}}},
  shorttitle = {Formal {{Monotony Analysis}} of~{{Neural Networks}} with~{{Mixed Inputs}}},
  booktitle = {Formal {{Methods}} for {{Industrial Critical Systems}}},
  author = {Vidot, Guillaume and Ducoffe, M{\'e}lanie and Gabreau, Christophe and Ober, Ileana and Ober, Iulian},
  editor = {Groote, Jan Friso and Huisman, Marieke},
  year = {2022},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {15--31},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-031-15008-1_3},
  abstract = {The use of ML technology to design safety-critical systems requires a complete understanding of the neural network's properties. Among the relevant properties in an industrial context, the verification of partial monotony may become mandatory. This paper proposes a method to evaluate the monotony property using a Mixed Integer Linear Programming (MILP) solver. Contrary to the existing literature, this monotony analysis provides a lower and upper bound of the space volume where the property does not hold, that we denote ``Non-Monotonic Space Coverage''. This work has several advantages: (i) our formulation of the monotony property works on discrete inputs, (ii) the iterative nature of our algorithm allows for refining the analysis as needed, and (iii) from an industrial point of view, the results of this evaluation are valuable to the aeronautical domain where it can support the certification demonstration. We applied this method to an avionic case study (braking distance estimation using a neural network) where the verification of the monotony property is of paramount interest from a safety perspective.},
  isbn = {978-3-031-15008-1},
  langid = {english},
  keywords = {Certification,Formal Methods,Monotony,Neural network verification},
  file = {/home/remi/Zotero/storage/D9CIKDLQ/Vidot et al. - 2022 - Formal Monotony Analysis of Neural Networks with M.pdf}
}

